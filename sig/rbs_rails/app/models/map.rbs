class Map < ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Map, ActiveRecord_Relation, Integer]

  attr_accessor id(): Integer
  def id_changed?: () -> bool
  def id_change: () -> [ Integer?, Integer? ]
  def id_will_change!: () -> void
  def id_was: () -> Integer?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[Integer?]?
  def id_previously_was: () -> Integer?
  def id_before_last_save: () -> Integer?
  def id_change_to_be_saved: () -> Array[Integer?]?
  def id_in_database: () -> Integer?
  def saved_change_to_id: () -> Array[Integer?]?
  def saved_change_to_id?: () -> bool
  def will_save_change_to_id?: () -> bool
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor plan_id(): Integer
  def plan_id_changed?: () -> bool
  def plan_id_change: () -> [ Integer?, Integer? ]
  def plan_id_will_change!: () -> void
  def plan_id_was: () -> Integer?
  def plan_id_previously_changed?: () -> bool
  def plan_id_previous_change: () -> Array[Integer?]?
  def plan_id_previously_was: () -> Integer?
  def plan_id_before_last_save: () -> Integer?
  def plan_id_change_to_be_saved: () -> Array[Integer?]?
  def plan_id_in_database: () -> Integer?
  def saved_change_to_plan_id: () -> Array[Integer?]?
  def saved_change_to_plan_id?: () -> bool
  def will_save_change_to_plan_id?: () -> bool
  def restore_plan_id!: () -> void
  def clear_plan_id_change: () -> void

  attr_accessor name(): String
  def name_changed?: () -> bool
  def name_change: () -> [ String?, String? ]
  def name_will_change!: () -> void
  def name_was: () -> String?
  def name_previously_changed?: () -> bool
  def name_previous_change: () -> Array[String?]?
  def name_previously_was: () -> String?
  def name_before_last_save: () -> String?
  def name_change_to_be_saved: () -> Array[String?]?
  def name_in_database: () -> String?
  def saved_change_to_name: () -> Array[String?]?
  def saved_change_to_name?: () -> bool
  def will_save_change_to_name?: () -> bool
  def restore_name!: () -> void
  def clear_name_change: () -> void

  attr_accessor created_at(): ActiveSupport::TimeWithZone
  def created_at_changed?: () -> bool
  def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def created_at_will_change!: () -> void
  def created_at_was: () -> ActiveSupport::TimeWithZone?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_created_at?: () -> bool
  def will_save_change_to_created_at?: () -> bool
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at(): ActiveSupport::TimeWithZone
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_updated_at?: () -> bool
  def will_save_change_to_updated_at?: () -> bool
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  attr_accessor is_google_map(): bool?
  def is_google_map_changed?: () -> bool
  def is_google_map_change: () -> [ bool?, bool? ]
  def is_google_map_will_change!: () -> void
  def is_google_map_was: () -> bool?
  def is_google_map_previously_changed?: () -> bool
  def is_google_map_previous_change: () -> Array[bool?]?
  def is_google_map_previously_was: () -> bool?
  def is_google_map_before_last_save: () -> bool?
  def is_google_map_change_to_be_saved: () -> Array[bool?]?
  def is_google_map_in_database: () -> bool?
  def saved_change_to_is_google_map: () -> Array[bool?]?
  def saved_change_to_is_google_map?: () -> bool
  def will_save_change_to_is_google_map?: () -> bool
  def restore_is_google_map!: () -> void
  def clear_is_google_map_change: () -> void
  attr_accessor is_google_map?(): bool

  attr_accessor address(): String?
  def address_changed?: () -> bool
  def address_change: () -> [ String?, String? ]
  def address_will_change!: () -> void
  def address_was: () -> String?
  def address_previously_changed?: () -> bool
  def address_previous_change: () -> Array[String?]?
  def address_previously_was: () -> String?
  def address_before_last_save: () -> String?
  def address_change_to_be_saved: () -> Array[String?]?
  def address_in_database: () -> String?
  def saved_change_to_address: () -> Array[String?]?
  def saved_change_to_address?: () -> bool
  def will_save_change_to_address?: () -> bool
  def restore_address!: () -> void
  def clear_address_change: () -> void

  attr_accessor heading(): Integer?
  def heading_changed?: () -> bool
  def heading_change: () -> [ Integer?, Integer? ]
  def heading_will_change!: () -> void
  def heading_was: () -> Integer?
  def heading_previously_changed?: () -> bool
  def heading_previous_change: () -> Array[Integer?]?
  def heading_previously_was: () -> Integer?
  def heading_before_last_save: () -> Integer?
  def heading_change_to_be_saved: () -> Array[Integer?]?
  def heading_in_database: () -> Integer?
  def saved_change_to_heading: () -> Array[Integer?]?
  def saved_change_to_heading?: () -> bool
  def will_save_change_to_heading?: () -> bool
  def restore_heading!: () -> void
  def clear_heading_change: () -> void

  attr_accessor bounds(): untyped?
  def bounds_changed?: () -> bool
  def bounds_change: () -> [ untyped?, untyped? ]
  def bounds_will_change!: () -> void
  def bounds_was: () -> untyped?
  def bounds_previously_changed?: () -> bool
  def bounds_previous_change: () -> Array[untyped?]?
  def bounds_previously_was: () -> untyped?
  def bounds_before_last_save: () -> untyped?
  def bounds_change_to_be_saved: () -> Array[untyped?]?
  def bounds_in_database: () -> untyped?
  def saved_change_to_bounds: () -> Array[untyped?]?
  def saved_change_to_bounds?: () -> bool
  def will_save_change_to_bounds?: () -> bool
  def restore_bounds!: () -> void
  def clear_bounds_change: () -> void

  def svgs: () -> Svg::ActiveRecord_Associations_CollectionProxy
  def svgs=: (Svg::ActiveRecord_Associations_CollectionProxy | Array[Svg]) -> (Svg::ActiveRecord_Associations_CollectionProxy | Array[Svg])
  def svg_ids: () -> Array[Integer]
  def svg_ids=: (Array[Integer]) -> Array[Integer]
  def rects: () -> Rect::ActiveRecord_Associations_CollectionProxy
  def rects=: (Rect::ActiveRecord_Associations_CollectionProxy | Array[Rect]) -> (Rect::ActiveRecord_Associations_CollectionProxy | Array[Rect])
  def rect_ids: () -> Array[Integer]
  def rect_ids=: (Array[Integer]) -> Array[Integer]
  def paths: () -> Path::ActiveRecord_Associations_CollectionProxy
  def paths=: (Path::ActiveRecord_Associations_CollectionProxy | Array[Path]) -> (Path::ActiveRecord_Associations_CollectionProxy | Array[Path])
  def path_ids: () -> Array[Integer]
  def path_ids=: (Array[Integer]) -> Array[Integer]
  def polylines: () -> Polyline::ActiveRecord_Associations_CollectionProxy
  def polylines=: (Polyline::ActiveRecord_Associations_CollectionProxy | Array[Polyline]) -> (Polyline::ActiveRecord_Associations_CollectionProxy | Array[Polyline])
  def polyline_ids: () -> Array[Integer]
  def polyline_ids=: (Array[Integer]) -> Array[Integer]

  def plan: () -> Plan
  def plan=: (Plan?) -> Plan?
  def reload_plan: () -> Plan?
  def build_plan: (untyped) -> Plan
  def create_plan: (untyped) -> Plan
  def create_plan!: (untyped) -> Plan

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Map, Integer]
    include Enumerable[Map]
  end

  class ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Map, Integer]
  end
end
