module ActionCable
  module Channel
    # The channel provides the basic structure of grouping behavior into logical units when communicating over the WebSocket connection.
    # You can think of a channel like a form of controller, but one that's capable of pushing content to the subscriber in addition to simply
    # responding to the subscriber's direct requests.
    #
    # Channel instances are long-lived. A channel object will be instantiated when the cable consumer becomes a subscriber, and then
    # lives until the consumer disconnects. This may be seconds, minutes, hours, or even days. That means you have to take special care
    # not to do anything silly in a channel that would balloon its memory footprint or whatever. The references are forever, so they won't be released
    # as is normally the case with a controller instance that gets thrown away after every request.
    #
    # Long-lived channels (and connections) also mean you're responsible for ensuring that the data is fresh. If you hold a reference to a user
    # record, but the name is changed while that reference is held, you may be sending stale data if you don't take precautions to avoid it.
    #
    # The upside of long-lived channel instances is that you can use instance variables to keep reference to objects that future subscriber requests
    # can interact with. Here's a quick example:
    #
    #   class ChatChannel < ApplicationCable::Channel
    #     def subscribed
    #       @room = Chat::Room[params[:room_number]]
    #     end
    #
    #     def speak(data)
    #       @room.speak data, user: current_user
    #     end
    #   end
    #
    # The #speak action simply uses the Chat::Room object that was created when the channel was first subscribed to by the consumer when that
    # subscriber wants to say something in the room.
    #
    # == Action processing
    #
    # Unlike subclasses of ActionController::Base, channels do not follow a RESTful
    # constraint form for their actions. Instead, Action Cable operates through a
    # remote-procedure call model. You can declare any public method on the
    # channel (optionally taking a <tt>data</tt> argument), and this method is
    # automatically exposed as callable to the client.
    #
    # Example:
    #
    #   class AppearanceChannel < ApplicationCable::Channel
    #     def subscribed
    #       @connection_token = generate_connection_token
    #     end
    #
    #     def unsubscribed
    #       current_user.disappear @connection_token
    #     end
    #
    #     def appear(data)
    #       current_user.appear @connection_token, on: data['appearing_on']
    #     end
    #
    #     def away
    #       current_user.away @connection_token
    #     end
    #
    #     private
    #       def generate_connection_token
    #         SecureRandom.hex(36)
    #       end
    #   end
    #
    # In this example, the subscribed and unsubscribed methods are not callable methods, as they
    # were already declared in ActionCable::Channel::Base, but <tt>#appear</tt>
    # and <tt>#away</tt> are. <tt>#generate_connection_token</tt> is also not
    # callable, since it's a private method. You'll see that appear accepts a data
    # parameter, which it then uses as part of its model call. <tt>#away</tt>
    # does not, since it's simply a trigger action.
    #
    # Also note that in this example, <tt>current_user</tt> is available because
    # it was marked as an identifying attribute on the connection. All such
    # identifiers will automatically create a delegation method of the same name
    # on the channel instance.
    #
    # == Rejecting subscription requests
    #
    # A channel can reject a subscription request in the #subscribed callback by
    # invoking the #reject method:
    #
    #   class ChatChannel < ApplicationCable::Channel
    #     def subscribed
    #       @room = Chat::Room[params[:room_number]]
    #       reject unless current_user.can_access?(@room)
    #     end
    #   end
    #
    # In this example, the subscription will be rejected if the
    # <tt>current_user</tt> does not have access to the chat room. On the
    # client-side, the <tt>Channel#rejected</tt> callback will get invoked when
    # the server rejects the subscription request.
    class Base
      include Callbacks

      include PeriodicTimers

      include Streams

      include Naming

      include Broadcasting

      include ActiveSupport::Rescuable

      attr_reader params: untyped

      attr_reader connection: untyped

      attr_reader identifier: untyped

      # A list of method names that should be considered actions. This
      # includes all public instance methods on a channel, less
      # any internal methods (defined on Base), adding back in
      # any methods that are internal, but still exist on the class
      # itself.
      #
      # ==== Returns
      # * <tt>Set</tt> - A set of all methods that should be considered actions.
      def self.action_methods: () -> untyped

      private

      def self.clear_action_methods!: () -> untyped

      def self.method_added: (untyped name) -> untyped

      public

      def initialize: (untyped connection, untyped identifier, ?::Hash[untyped, untyped] params) -> void

      # Extract the action name from the passed data and process it via the channel. The process will ensure
      # that the action requested is a public method on the channel declared by the user (so not one of the callbacks
      # like #subscribed).
      def perform_action: (untyped data) -> untyped

      # This method is called after subscription has been added to the connection
      # and confirms or rejects the subscription.
      def subscribe_to_channel: () -> untyped

      def unsubscribe_from_channel: () -> untyped

      private

      def subscribed: () -> nil

      def unsubscribed: () -> nil

      def transmit: (untyped data, ?via: untyped? via) -> untyped

      def ensure_confirmation_sent: () -> (nil | untyped)

      def defer_subscription_confirmation!: () -> untyped

      def defer_subscription_confirmation?: () -> untyped

      def subscription_confirmation_sent?: () -> untyped

      def reject: () -> untyped

      def subscription_rejected?: () -> untyped

      def delegate_connection_identifiers: () -> untyped

      def extract_action: (untyped data) -> untyped

      def processable_action?: (untyped action) -> untyped

      def dispatch_action: (untyped action, untyped data) -> untyped

      def action_signature: (untyped action, untyped data) -> untyped

      def transmit_subscription_confirmation: () -> untyped

      def reject_subscription: () -> untyped

      def transmit_subscription_rejection: () -> untyped
    end
  end
end
