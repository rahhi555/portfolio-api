module ActionCable
  module Channel
    class NonInferrableChannelError < ::StandardError
      def initialize: (untyped name) -> void
    end

    # Stub +stream_from+ to track streams for the channel.
    # Add public aliases for +subscription_confirmation_sent?+ and
    # +subscription_rejected?+.
    module ChannelStub
      def confirmed?: () -> untyped

      def rejected?: () -> untyped

      def stream_from: (untyped broadcasting) -> untyped

      def stop_all_streams: () -> untyped

      def streams: () -> untyped

      # Make periodic timers no-op
      def start_periodic_timers: () -> nil

      alias stop_periodic_timers start_periodic_timers
    end

    class ConnectionStub
      attr_reader transmissions: untyped

      attr_reader identifiers: untyped

      attr_reader subscriptions: untyped

      attr_reader logger: untyped

      def initialize: (?::Hash[untyped, untyped] identifiers) -> void

      def transmit: (untyped cable_message) -> untyped

      def connection_identifier: () -> untyped

      private

      def connection_gid: (untyped ids) -> untyped
    end

    # Superclass for Action Cable channel functional tests.
    #
    # == Basic example
    #
    # Functional tests are written as follows:
    # 1. First, one uses the +subscribe+ method to simulate subscription creation.
    # 2. Then, one asserts whether the current state is as expected. "State" can be anything:
    #    transmitted messages, subscribed streams, etc.
    #
    # For example:
    #
    #   class ChatChannelTest < ActionCable::Channel::TestCase
    #     def test_subscribed_with_room_number
    #       # Simulate a subscription creation
    #       subscribe room_number: 1
    #
    #       # Asserts that the subscription was successfully created
    #       assert subscription.confirmed?
    #
    #       # Asserts that the channel subscribes connection to a stream
    #       assert_has_stream "chat_1"
    #
    #       # Asserts that the channel subscribes connection to a specific
    #       # stream created for a model
    #       assert_has_stream_for Room.find(1)
    #     end
    #
    #     def test_does_not_stream_with_incorrect_room_number
    #       subscribe room_number: -1
    #
    #       # Asserts that not streams was started
    #       assert_no_streams
    #     end
    #
    #     def test_does_not_subscribe_without_room_number
    #       subscribe
    #
    #       # Asserts that the subscription was rejected
    #       assert subscription.rejected?
    #     end
    #   end
    #
    # You can also perform actions:
    #   def test_perform_speak
    #     subscribe room_number: 1
    #
    #     perform :speak, message: "Hello, Rails!"
    #
    #     assert_equal "Hello, Rails!", transmissions.last["text"]
    #   end
    #
    # == Special methods
    #
    # ActionCable::Channel::TestCase will also automatically provide the following instance
    # methods for use in the tests:
    #
    # <b>connection</b>::
    #      An ActionCable::Channel::ConnectionStub, representing the current HTTP connection.
    # <b>subscription</b>::
    #      An instance of the current channel, created when you call +subscribe+.
    # <b>transmissions</b>::
    #      A list of all messages that have been transmitted into the channel.
    #
    #
    # == Channel is automatically inferred
    #
    # ActionCable::Channel::TestCase will automatically infer the channel under test
    # from the test class name. If the channel cannot be inferred from the test
    # class name, you can explicitly set it with +tests+.
    #
    #   class SpecialEdgeCaseChannelTest < ActionCable::Channel::TestCase
    #     tests SpecialChannel
    #   end
    #
    # == Specifying connection identifiers
    #
    # You need to set up your connection manually to provide values for the identifiers.
    # To do this just use:
    #
    #   stub_connection(user: users(:john))
    #
    # == Testing broadcasting
    #
    # ActionCable::Channel::TestCase enhances ActionCable::TestHelper assertions (e.g.
    # +assert_broadcasts+) to handle broadcasting to models:
    #
    #
    #  # in your channel
    #  def speak(data)
    #    broadcast_to room, text: data["message"]
    #  end
    #
    #  def test_speak
    #    subscribe room_id: rooms(:chat).id
    #
    #    assert_broadcast_on(rooms(:chat), text: "Hello, Rails!") do
    #      perform :speak, message: "Hello, Rails!"
    #    end
    #  end
    class TestCase < ActiveSupport::TestCase
      module Behavior
        extend ActiveSupport::Concern

        include ActiveSupport::Testing::ConstantLookup

        # include ActionCable::TestHelper

        CHANNEL_IDENTIFIER: ::String

        attr_reader connection: untyped

        attr_reader subscription: untyped

        module ClassMethods
          def tests: (untyped channel) -> untyped

          def channel_class: () -> untyped

          def determine_default_channel: (untyped name) -> untyped
        end

        # Set up test connection with the specified identifiers:
        #
        #   class ApplicationCable < ActionCable::Connection::Base
        #     identified_by :user, :token
        #   end
        #
        #   stub_connection(user: users[:john], token: 'my-secret-token')
        def stub_connection: (?::Hash[untyped, untyped] identifiers) -> untyped

        # Subscribe to the channel under test. Optionally pass subscription parameters as a Hash.
        def subscribe: (?::Hash[untyped, untyped] params) -> untyped

        # Unsubscribe the subscription under test.
        def unsubscribe: () -> untyped

        # Perform action on a channel.
        #
        # NOTE: Must be subscribed.
        def perform: (untyped action, ?::Hash[untyped, untyped] data) -> untyped

        # Returns messages transmitted into channel
        def transmissions: () -> untyped

        # Enhance TestHelper assertions to handle non-String
        # broadcastings
        def assert_broadcasts: (untyped stream_or_object, *untyped args) -> untyped

        def assert_broadcast_on: (untyped stream_or_object, *untyped args) -> untyped

        # Asserts that no streams have been started.
        #
        #   def test_assert_no_started_stream
        #     subscribe
        #     assert_no_streams
        #   end
        #
        def assert_no_streams: () -> untyped

        # Asserts that the specified stream has been started.
        #
        #   def test_assert_started_stream
        #     subscribe
        #     assert_has_stream 'messages'
        #   end
        #
        def assert_has_stream: (untyped stream) -> untyped

        # Asserts that the specified stream for a model has started.
        #
        #   def test_assert_started_stream_for
        #     subscribe id: 42
        #     assert_has_stream_for User.find(42)
        #   end
        #
        def assert_has_stream_for: (untyped object) -> untyped

        private

        def check_subscribed!: () -> untyped

        def broadcasting_for: (untyped stream_or_object) -> untyped
      end

      include Behavior
    end
  end
end
