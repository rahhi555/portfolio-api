redis.set('lisa','auth sign')
redis = Redis.new(host: '172.17.0.2')
redis.set('lisa','auth sign')
redis = Redis.new(url: 'redis://localhost:6379/0')
redis.set('lisa','auth sign')
redis = Redis.new(host: '172.17.0.3')
redis.set('lisa','auth sign')
redis = Redis.new(host: '172.17.0.1')
redis.set('lisa','auth sign')
redis.get 'lisa'
redis
redis = Redis.new
exit
redis
redis = Redis.new(host: redis)
redis = Redis.new(host: 'redis')
redis = Redis.new()
redis.set('a','aa')
redis.set('a','aa')
redis.set('a','aa')
redis = Redis.new(host: 'redis')
redis.set('a','aa')
redis.get('a')
redis2 = Redis.new(host: '172.18.0.5')
redis2.set('ab','aa')
exit
FirebaseIdToken::Cretificates.present?
FirebaseIdToken::Certificates.present?
FirebaseIdToken::Certificates.request
FirebaseIdToken::Certificates.present?
exit
FirebaseIdToken::Certificates.ttl
exit
FirebaseIdToken::Certificates.present?\
=> true
FirebaseIdToken::Certificates.present?
exit
User.all
User.delete_all
User.all
exit
User.all
exit
Rails.application.credentials.db[:password]
Rails.application.credentials.db[:host]
exit
User.all
User.delete_all
User.all
User.all
User.all
User.all
User.all
User.all
exit
exit
User.all
exit
FirebaseIdToken::Certificates.present?
FirebaseIdToken::Certificates.request!
exit
exit
redis = Redis.new(host: 'redis',db: 15)
redis.get('firebase_id_token:certificates')
exit
User.all
exit
User.all
User.delete_all
exit
current_user
exit
User.al
User.all
User.all
User.delete_all
User.all
exit
User.all
User.delete_all
exit
User.all
User.all
exit
User.all
User.delete_all
User.all
User.all
exit
User.all
User.delete_all
exit
User.all
User.delete_all
exit
User.all
User.all
User.all
exit
User.delete_all
exit
User.all
User.delete_all
exit
User.all
User.all
exit
User.all
exit
User.all
exit
User.all
User.all
exit
User.all
User.delete_all
User.all
User.delete_all
exit
User.delete_all
exit
User.delete_all
exit
User.all
User.delete_all
exit
User.all
exit
User.all
Plan.all
Plan.joins(:user).select(:id, :name, :created_at, :updated_at, 'users.name as author')
test = Plan.joins(:user).select(:id, :name, :created_at, :updated_at, 'users.name as author')
test.inspect
test.attributes
test.attribute
test[0]
test[0].attributes
test = Plan.joins(:user).select(:id, :name, 'users.name as author, plans.created_at as createdAt, plans.updated_at as updatedAt')
test[0].attributes
"TestCase".underscore
exit
Plan.all
exit
Plan.delete_all
exit
FirebaseIdToken
FirebaseIdToken::Signatur
FirebaseIdToken::Signature
FirebaseIdToken::Signature::VERSION
FirebaseIdToken::VERSION
exit
User.all
User.delete_all
exit
User.all
params = { uid: SecureRandom.uuid, name: 'test', provider: 'anonymous' }
User.create!(params)
User.all
User.last.provider
User.last.password?
User.last.state_before_type_cast
User.last.provider_before_type_cast
params = { uid: SecureRandom.uuid, name: 'test2', provider: 'password' }
User.create!(params)
User.all
params = { uid: SecureRandom.uuid, name: 'test', provider: 'anonymoussss' }
User.create!(params)
User.create(params)
params = { uid: SecureRandom.uuid, name: 'test', provider: 'google.com' }
User.create(params)
User.all
User.last.provider_before_type_cast
User.last.provider
exit
'google.com'.underscore
'google.com'.snackcase
'google.com'.snack
'google.com'.sneakcase
'google.com'.snakecase
'google.com'.underscore
Plan.all
exit
User.all
User.create(name: 'test', uid: SecureRandom.uuid, provider: 'google.com')
use = User.last
user.google.com?
user.google_com?
user.password
user.password?
user.anonymous?
user
use
user = use
user.google_com?
user.google.com?
user.password?
user.anonymous?
user.methods
user.google.com?
user.google.com!
user.'google.com!'
exit
'password'.split('.')
'password.com'.split('.')
'password.com'.split('.')[0]
'password.com'.split('.com')[0]
'password.com'.split('.com')
'password.com'.slice(/.*\com/)
'password.com'.slice(/.*\.com$/)
'password.com'.slice(/.*[^\.com]$/)
'password.com'.slice(/.*[\.com]$/)
'password.com'.slice(/.*[^com]$/)
'password.com'.slice(/.*[^com]/)
'password.com'.slice(/.*[^\.com]/)
exit
User.all
User.delete_all
exit
User.destroy_all
Plan.all
exit
pran = Plan.first
plan.user?
plan = Plan.first
plan.user?
plan.user
plan.user.nil?
exit
User.all
exit
User.all
User.last.destroy
exit
User.all
exit
User.all
exit
user = User.first
Plan.create(user: user, name: '')
Plan.create!(user: user, name: '')
exit
Plan.all
exit
User.first.plans
User.first.plans(10)
User.first.plans.find(10)
exit
user = User.find_by(uid: "FGt6Dj5B2BZgbTF9khqlSuAoSi7P")
exit
Plan.all
Plan.first.published
Plan.first.published?
exit
Plan.all
exit
Plan.all
plan = Plan.create!(name: 'ggggggggggggggggggg', published: true, user: User.first)
User.all
Plan.all
Plan.all
exit
Plan.all
Plan.all
Plan.all
exit
plan = Plan.first
plan.created_at
Time.zone.now
Time.zone.default
Time.zone_default

plan.created_at.strftime('%Y年%m月%d日 %H:%M:%S')
plan.created_at
exit
Plan.first.strf_created_at
User.first.strf_created_at
exit
User.first.strf_updated_at
exit
User.all
User.first.plans
user = User.first
ids = user.plans.ids
ids
user.destroy
ids
user
User.all
Plan.all
exit
Plans.first.roles << Role.create(name: 'test')
Plan.first.roles << Role.create(name: 'test')
Plan.first.roles << Role.create!(name: 'test')
Role.all
user.roles
User.first.roles
Plan.first.user
Plan.all
plan = Plan.find(11)
plan.roles << Role.create!(name: 'test')
plan.roles
role = Role.first
plan
exit
Plan.all
plan1 = User.first.plans.first
plan2 = User.second.plans.first
plan1.roles << Role.new(name:'test')
plan1.roles << Role.new(name:'test')
plan1.roles << Role.new!(name:'test')
plan1.roles << Role.save!(name:'test')
plan1.roles << Role.create!(name:'test')
plan1.roles
plan1.reload
plan1.roles
role = Role.new(name: 'test')
plan1.roles << role
plan2.roles << role
plan2.roles << role
plan2.roles << role
plan2.roles << role
plan2.reload
plan2.roles
plan1
plan1.roles
plan1.reload
plan1.roles
user
User.first.roles
exit
Role.all
exit
Role.all
exit
user = User.fist
User.first.plans
user = User.first
user
user.members
user.plans
user.plans.first
user.plans.first.members
user.plans.first.members << Member.create!(accept: false)
user.plans.first.members << Member.build!(accept: false)
user.plans.first.members << Member.build(accept: false)
user.plans.first.members.build(accept: false)
member = user.plans.first.members.build(accept: false)
user.members << member
member.errors.full_messages
exit
exit
Plan.all
user ~ User.find(111)
user = User.find(111)
user2 = User.find(110)
member = user.member.build(accept: false)
member = user.members.build(accept: false)
user.plans
member.plan_id = 15
member
member.save!
member
user.plans
exit
plan = Plan.first
plan.user
Plan.all
plan = Plan.find(25)
plan
plan.user
plan.user.exist?
plan.user.exists?
plan.user.exist
plan.user.exists
plan.user.nil?
plan2 = Plan.first
plan2.user.nil?
plan.user.include
plan.user.includes
plan.user
exit
Plan.all
plan = Plan.find(24)
plan.members.build(accept: false)
member = plan.members.build(accept: false)
member.create
member.save!
member.user = plan.user
member
member.save!
member
member.plan_match_user?
member2 = plan.members.build(accept: false)
member2.user = User.first
member2.create!
member2.save!
member2
plan
member2.plan_match_user?
exit
Plan.all
plan = plan.find(25)
plan = Plan.find(25)
user = plan.user
user.member << Member(accept: false, plan: 25)
user.members << Member(accept: false, plan: 25)
user.members << Member.build(accept: false, plan: 25)
user.members << Member.create!(accept: false, plan: 25)
user.members << Member.create!(accept: false, plan_id: 25)
user.members << Member.create!(accept: false, plan_id: 25)
member = user.members.build(accept: false, plan_id: 25)
member.create!
member.save!
member.save!
member.save!
member.save!
Member.all
member
Member.all
user.members << member
user.members << member
user.members << member
user.members << member
user.members << member
Member.all
user.members << member
user.members << member
user.members
user.members.reload
user.members
exit
Plan.find(15)
plan = Plan.find(15)
member = plan.members.build
User.first.members << member
Member.all
plan
User.second << member
User.second.members << member
Member.all
plan
exit
member = Member.new
member.plan_match_user?
member.plan_match_user?
member.plan_id = 15
member.plan_match_user?
exit
member = Member.new
member.plan_match_user?
exit
member = Member.new
member.plan_match_user?
exit
member = Member.new
member.plan_match_user?
exit
Plan.first.exists?
exit
member = FactoryBot.build(:member)
member.save
member
member.save
member
Member.all
member2 = Member.new
member.user_id = 163
member.plan_id = 26
member2.plan_id = 26
member2.save
member2.errors.full_message
member2.errors.full_messages
member2
member2.user_id = 163
member2.save
member2.errors.full_messages
member2.save!
exit
plan = Plan.first
plan.roles
plan.roles.include?
plan.roles.include?(1)
exit
FactoryBot.create(:plan, user: 99999999999999999)
FactoryBot.create(:plan, user_id: 9999999999999999)
FactoryBot.create(:plan, user_id: 9999999)
exit
role = FactoryBot.create(:role)
member = FactoryBot.create(:member, role: role)
Plan.all
plan = member.plan
plan.role
plan.roles
member.role
exit
member = FactoryBot.create(:member)
member.role_include_plan?
exit
member = FactoryBot.create(:member)
member.role_include_plan?
exit
member = FactoryBot.create(:member)
exit
member = FactoryBot.create(:member)
exit
FactoryBot.build(:member)
FactoryBot.build(:member).attributes
FactoryBot.create(:member)
exit
member = FactoryBot.build(:member)
member.save
member.save!

member = FactoryBot.create(:member)
member
member.plan
member.plan.roles
member.role
member.plan
member.role_include_plan?
member.plan
member
member.plan.nil?
exit
member = FactoryBot.create(:member)
member.role_include_plan?
exit
FactoryBot.build(:member)
exit
member = FactoryBot.attributes(:member)
member = FactoryBot.attributes_for(:member)
member = FactoryBot.build(:member)
member = FactoryBot.create(:member)
member.role.plan
exit
member = FactoryBot.create(:member)
member.role.plan
member = FactoryBot.build(:member)
member = FactoryBot.save!
member.save!
exit
member = FactoryBot.build(:member)
exit
FactoryBot.create(:member)
member = FactoryBot.create(:member)
member.plan
member.role
exit
member = FactoryBot.build(:member)
member.plan_id
member.inspect
ap member
member.attributes
member.attributes
exit
member = FactoryBot.create(:member, role: nil)
role = FactoryBot.create(:role)
member.plan
role.plan
member.role = role
member
member.role
member.plan
member.plan.role_ids.include?(member.role.id)
exit
member = FactoryBot.create(:member, role: nil)
role = FactoryBot.create(:role)
member.role = role
member
member.role.id
member.role
member.plan
exit
member = FactoryBot.create(:member, role: nil)
exit
member = FactoryBot.create(:member, role: nil)
role = FactoryBot.create(:role)
member.role = role
member
member.reload
member.errors
member.role = role
member.errors
Member.all
Member.first.role = role
Member.first
role
member.update(role: role)
member.errors
role2 = FactoryBot.create(:role, plan: 51)
role2 = FactoryBot.create(:role, plan_id: 51)
role
role2
member.role = role2
member
Member.first
member.update(role2)
member.update(role: role2)
member.errors
member.plan
member.plan.roles
role2
member.plan.role_ids.include?(role)
member.plan.role_ids.include?(role2)
member.plan.role_ids.include?(role.id)
member.plan.role_ids.include?(role2.id)
member.update(role_id: role2.id)
exit
member = FactoryBot.create(:member, role: nil)
nil === false
member2 = FactoryBot.create(:member)
role = FactoryBot.create(:role)
member.role
member.role = role
member.update
member.save
member.plan
member.plan.roles
member.role << role
member.plan.roles << role
member.role = role
member.save
role2 = FactoryBot.create(:role, plan_id: member.plan.id)
member.plan.role_ids
member.plan.reload
member.plan.role_ids
member.roles = role2
member.role = role2
member.role.save
member.role
exit
plan = Plan.first
plan.reload
plan.roles.reload
exit
rspec
exit
Rails.config
Rails::Application
Rails::Application.config
Rails::Application.config.generators
Api:Application
Api::Application
Api::Application.conig
Api::Application.config
Api::Application.config.generators
Api::Application.config.generators.class
Api::Application.config.generators
exit
FactoryBot.attributes_for(:member)
member = FactoryBot.attributes_for(:member)
ap member
member = { member:  FactoryBot.attributes_for(:member)}
ap member
member = FactoryBot.build(:member)
exit
member = Member.first
member.plan.id
member.role.id
member.role
member.role&.id
member.role.id
exit
@members = Plan.find(20).members
members.id
@members.map do |member|\
  puts member.id\
end
exit
{ userId: 1, roleId: 1, memberId: 1 }.deep_transform_keys
{ userId: 1, roleId: 1, memberId: 1 }.deep_transform_keys!
{ userId: 1, roleId: 1, memberId: 1 }.deep_transform_keys(&:underscore)
{ 'userId': 1, 'roleId': 1, 'memberId': 1 }.deep_transform_keys
{ 'userId': 1, 'roleId': 1, 'memberId': 1 }.deep_transform_keys(&:snake_case)
{ 'userId': 1, 'roleId': 1, 'memberId': 1 }.deep_transform_keys(&:underscore)
{ 'userId': 1, 'roleId': 1, 'memberId': 1 }.transform_keys(&:underscore)
{ 'userId' => 1, 'roleId' => 1, 'memberId' => 1 }.transform_keys(&:underscore)
{ 'userId' => 1, 'roleId' => 1, 'memberId' => 1 }.deep_transform_keys(&:underscore)
exit
{ a: 'a' }.hash?
{ a: 'a' }.class
rspec
exit
User.all
User.find_by(uid: 8Ti1O2611TQURowq0LTuDZY0ps9v)
User.find_by(uid: '8Ti1O2611TQURowq0LTuDZY0ps9v')
User.find_by(uid: '8Ti1O2611TQURowq0LTuDZY0ps9v').update(provider: 'email')
User.find_by(uid: '8Ti1O2611TQURowq0LTuDZY0ps9v').update(provider: 'password')
exit
Member.all
member = Member.second
member.update(role_id: '')
member = Member.second
member.update(role_id: null)
member.update(role_id: nil)
xit
exit
Plan.find(25)
plan = Plan.find(25)
plan.members
plan.members.where(accept)
plan.members.where(accept: true)
plan.members.where(accept: true).ids
plan.members.select(:user_id).where(accept: true).ids
plan.members.select(:user_id).where(accept: true).ids
plan.users
plan.user
plan.members.select(:user_id).where(accept: true).user_ids
plan.members.select(:user_id).where(accept: true).user
plan.members.select('user_id').where(accept: true)
plan.members.select('user_id').where(accept: true).ids
plan.members.select(:user_id).where(accept: true)
plan.members.plack(:user_id).where(accept: true)
plan.members.pluck(:user_id).where(accept: true)
plan.members.where(accept: true).pluck(:user_id)
plan.members.where(accept: true).pluck(:user_id)
exit
plan.members.where(accept: true).pluck(:user_id)
Plan.find(25).members.where(accept: true).pluck(:user_id)
exit
plan = Plan.find(25)
plan.members
Plan.first.members
exit

exit
Plan.first.members.select(:user_id)
exit
plan = Plan.find(25)
plan.select('members')
plan.join('members').select('members.user_id')
plan.join('members')
plan.join(:members)
plan.join(:member)
plan.members
plan.members.camelize
plan.members.camelize
plan.members.deep_transform_keys
plan.members.transform_keys
plan.members.transform_keys!
plan.members.methods
plan.members.map{|member| member.camelize }
plan.members
plan.members.class
plan.members.methods
plan.members.keys
plan.members.keys!
plan.members.transform_keys
plan.members.map{|member| member.transform_keys}
plan.members.map{|member| member}
plan.members.map{|member| ap member}
plan.members.map{|member| member.keys}
plan.members.map{|member| member.methods}
plan.members.map{|member| member.to_hash}
plan.members.map{|member| member.to_s}
plan.members.map{|member| member.attributes}
plan.members.map{|member| member.attributes.keys}
plan.members.map{|member| member.attributes.transform_keys}
plan.members.map{|member| member.attributes.transform_keys(&:camelize)}
plan.members.map{|member| member.attributes.transform_keys(&:camelize:lower)}
plan.members.map{|member| member.attributes.transform_keys(&:camelize[:lower])}
plan.members.map{|member| member.attributes.transform_keys(&:camelize(:lower))}
plan.members.map{|member| member.attributes.transform_keys.map{ |key| camelize(key, :lower) }}
plan.members.map{|member| member.attributes.transform_keys.map{ |key| key.camelize }}
plan.members.map{|member| member.attributes.transform_keys.map{ |key| key.camelize(:lower) }}
plan.members.map{|member| member.attribures}
plan.members.map{|member| member.attributes}
plan.members.map{|member| member.attributes.transform_keys!}
plan.members.map{|member| member.attributes.transform_keys!(&:camelize)}
plan.members.map{|member| member.attributes.transform_keys!(&:camelize(:lower))}
plan.members.map{|member| member.attributes.transform_keys!{|key| key.camelize }}
plan.members.map{|member| member.attributes.transform_keys!{|key| key.camelize(:lower) }}
members =  plan.members.map{|member| member.attributes.transform_keys!{|key| key.camelize(:lower)}}
members
exit
Member.first.user_id
exit
Plan.destory_all
Plan.destroy_all
Member.all
Role.all
exit
User.first.roles
User.first.maps
exit
map_params = { name: 'new map name'  }
map_params.name
map_params['name']
map_params[:name]
exit
Map
Svg
Svg.create(type: 'rect', map_id: Map.first, x: 1, y: 1, name: 'test', display_name: 1.1666)
exit
Svg.create(type: 'rect', map_id: Map.first, x: 1, y: 1, name: 'test', display_name: 1.1666)
Rect.create( map_id: Map.first, x: 1, y: 1, name: 'test', display_name: 1.1666)
Rect.create( map_id: Map.first, x: 1, y: 1, name: 'test', display_time: 1.1666)
Rect.first
Rect.create!( map_id: Map.first, x: 1, y: 1, name: 'test', display_time: 1.1666)
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: 1.1666)

Rect.first
rect = Rect.first
rect.display_time

rect.udpate!(display_time: '00:00:01.111')
rect.update!(display_time: '00:00:01.111')
rect
rect.reload
rect.display_time
exit
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
rect.update!(display_time: '00:00:01.111')
Rect.first.update!(display_time: '00:00:01.111')
Rect.firs
Rect.first
exit
exit
Map.first
exit
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
Rect.first
exit
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
exit
Rect.first
exit
Rect.first
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
exit
Rect.first
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
exit
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
exit
Rect.first
exit
Rect.first
exit
Rect.first
exit
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
exit
Path
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
Path.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
Path.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test')
Path.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666', draw_point: '10 20 30')
Path.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666', draw_points: '10 20 30')
exit
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666', draw_points: '10 20 30')
exit
Svg.rect
Svg.rects
Svg.methods
exit
Rect.first
exit
rect = FactoryBot.build(:rect, map_id: nil)
rect.save
rect.errors.full_messages
exit
FactoryBot.create(:rect, x: nil)
exit
FactoryBot.create(:rect, x: nil)
exit
FactoryBot.create(:rect, fill: nil)
rect =  FactoryBot.build(:rect)
rect
rect.fill = nil
rect.save
exit
rect =  FactoryBot.build(:rect)
rect.fill = nil
rect.save
exit
FactoryBot.create(:rect, fill: nil)

rect = FactoryBot.create(:rect)
rect = FactoryBot.build(:rect)
rect.delete(:fill)
rect.class
rect.superclass
attr = FactoryBot.attribute_for(:rect)
attr = FactoryBot.attributes_for(:rect)
rect
rect.delete(fill)

rect.to_hash
rect.to_s
rect.attributes
attr = rect.attributes
attr.delete(:fill)
attr
attr.delete!(:fill)
attr.delete(:fill)
attr.delete('fill')
attr
Rect.craete(attr)
Rect.create(attr)
Rect.create!(attr)
attr['map_id'] = Map.first
attr
attr['map_id'] = Map.first.id
attr
Rect.create!(attr)
attr.delete('type')
Rect.create!(attr)
attr
rect = Rect.build(attr)
rect = Rect.new(attr)
rect
Rect.new
exit
FactoryBot.create(:rect, fill: nil)
FactoryBot.build(:rect, fill: nil)
Rect.new
exit
Rect.create(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5)
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5)
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
exit
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
exit
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
exit
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
attr = { map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test' }
Rect.create!(attr)
attr = { map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test', fill: nil }
Rect.create!(attr)
exit
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
exit
rect = FactoryBot.build(:rect)
rect.class
rect.superclass
rect = FactoryBot.build(:user)
rect.class
User.class
User.superclass
rect.methods
rect.slice
rect.slice(:fill)
rect.slice
rect.slice{ :fill }
rect.slice
rect
rect = FactoryBot.build(:rect)
attr = rect.attributes
attr.delete('fill')
Rect.create!(attr)
attr('map') = Map.first
exit
FactoryBot.attrbutes_for(:rect).map_id = Map.first
FactoryBot.attributes_for(:rect).map_id = Map.first
exit
rspec
exit
attr = FactoryBot.attributes_for(:rect)
attr.delete(:display_time, :draw_points)
attr.delete(:display_time)
attr.delete(:draw_points)
attr
Rect.create!(attr)
attr[:map_id] = Map.first.id
attr
Rect.create!(attr)
Path.create!(attr)
attr.delete(:type)
attr
Path.create!(attr)
path = attr.deep_dup
path.delete[:width]
path.delete(:width)
path.delete(:height)
path
attr
path[:draw_points] = '10'
path
Path.create!(path)
exit
Svg.find_all(type: 'Rect')
Svg.rect
exit
Svg.where(type: 'Rect')
Svg.all
exit
Map.first.svgs
Map.first.rects
exit
'rects'.singularize
'rects'.singularize
exit
'rects'.singularize
exit
String.singularize
'rects'.classify
rspec -n
exit
