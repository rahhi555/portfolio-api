{ 'userId' => 1, 'roleId' => 1, 'memberId' => 1 }.transform_keys(&:underscore)
{ 'userId' => 1, 'roleId' => 1, 'memberId' => 1 }.deep_transform_keys(&:underscore)
exit
{ a: 'a' }.hash?
{ a: 'a' }.class
rspec
exit
User.all
User.find_by(uid: 8Ti1O2611TQURowq0LTuDZY0ps9v)
User.find_by(uid: '8Ti1O2611TQURowq0LTuDZY0ps9v')
User.find_by(uid: '8Ti1O2611TQURowq0LTuDZY0ps9v').update(provider: 'email')
User.find_by(uid: '8Ti1O2611TQURowq0LTuDZY0ps9v').update(provider: 'password')
exit
Member.all
member = Member.second
member.update(role_id: '')
member = Member.second
member.update(role_id: null)
member.update(role_id: nil)
xit
exit
Plan.find(25)
plan = Plan.find(25)
plan.members
plan.members.where(accept)
plan.members.where(accept: true)
plan.members.where(accept: true).ids
plan.members.select(:user_id).where(accept: true).ids
plan.members.select(:user_id).where(accept: true).ids
plan.users
plan.user
plan.members.select(:user_id).where(accept: true).user_ids
plan.members.select(:user_id).where(accept: true).user
plan.members.select('user_id').where(accept: true)
plan.members.select('user_id').where(accept: true).ids
plan.members.select(:user_id).where(accept: true)
plan.members.plack(:user_id).where(accept: true)
plan.members.pluck(:user_id).where(accept: true)
plan.members.where(accept: true).pluck(:user_id)
plan.members.where(accept: true).pluck(:user_id)
exit
plan.members.where(accept: true).pluck(:user_id)
Plan.find(25).members.where(accept: true).pluck(:user_id)
exit
plan = Plan.find(25)
plan.members
Plan.first.members
exit

exit
Plan.first.members.select(:user_id)
exit
plan = Plan.find(25)
plan.select('members')
plan.join('members').select('members.user_id')
plan.join('members')
plan.join(:members)
plan.join(:member)
plan.members
plan.members.camelize
plan.members.camelize
plan.members.deep_transform_keys
plan.members.transform_keys
plan.members.transform_keys!
plan.members.methods
plan.members.map{|member| member.camelize }
plan.members
plan.members.class
plan.members.methods
plan.members.keys
plan.members.keys!
plan.members.transform_keys
plan.members.map{|member| member.transform_keys}
plan.members.map{|member| member}
plan.members.map{|member| ap member}
plan.members.map{|member| member.keys}
plan.members.map{|member| member.methods}
plan.members.map{|member| member.to_hash}
plan.members.map{|member| member.to_s}
plan.members.map{|member| member.attributes}
plan.members.map{|member| member.attributes.keys}
plan.members.map{|member| member.attributes.transform_keys}
plan.members.map{|member| member.attributes.transform_keys(&:camelize)}
plan.members.map{|member| member.attributes.transform_keys(&:camelize:lower)}
plan.members.map{|member| member.attributes.transform_keys(&:camelize[:lower])}
plan.members.map{|member| member.attributes.transform_keys(&:camelize(:lower))}
plan.members.map{|member| member.attributes.transform_keys.map{ |key| camelize(key, :lower) }}
plan.members.map{|member| member.attributes.transform_keys.map{ |key| key.camelize }}
plan.members.map{|member| member.attributes.transform_keys.map{ |key| key.camelize(:lower) }}
plan.members.map{|member| member.attribures}
plan.members.map{|member| member.attributes}
plan.members.map{|member| member.attributes.transform_keys!}
plan.members.map{|member| member.attributes.transform_keys!(&:camelize)}
plan.members.map{|member| member.attributes.transform_keys!(&:camelize(:lower))}
plan.members.map{|member| member.attributes.transform_keys!{|key| key.camelize }}
plan.members.map{|member| member.attributes.transform_keys!{|key| key.camelize(:lower) }}
members =  plan.members.map{|member| member.attributes.transform_keys!{|key| key.camelize(:lower)}}
members
exit
Member.first.user_id
exit
Plan.destory_all
Plan.destroy_all
Member.all
Role.all
exit
User.first.roles
User.first.maps
exit
map_params = { name: 'new map name'  }
map_params.name
map_params['name']
map_params[:name]
exit
Map
Svg
Svg.create(type: 'rect', map_id: Map.first, x: 1, y: 1, name: 'test', display_name: 1.1666)
exit
Svg.create(type: 'rect', map_id: Map.first, x: 1, y: 1, name: 'test', display_name: 1.1666)
Rect.create( map_id: Map.first, x: 1, y: 1, name: 'test', display_name: 1.1666)
Rect.create( map_id: Map.first, x: 1, y: 1, name: 'test', display_time: 1.1666)
Rect.first
Rect.create!( map_id: Map.first, x: 1, y: 1, name: 'test', display_time: 1.1666)
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: 1.1666)

Rect.first
rect = Rect.first
rect.display_time

rect.udpate!(display_time: '00:00:01.111')
rect.update!(display_time: '00:00:01.111')
rect
rect.reload
rect.display_time
exit
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
rect.update!(display_time: '00:00:01.111')
Rect.first.update!(display_time: '00:00:01.111')
Rect.firs
Rect.first
exit
exit
Map.first
exit
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
Rect.first
exit
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
exit
Rect.first
exit
Rect.first
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
exit
Rect.first
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
exit
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
exit
Rect.first
exit
Rect.first
exit
Rect.first
exit
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
exit
Path
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
Path.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666')
Path.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test')
Path.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666', draw_point: '10 20 30')
Path.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666', draw_points: '10 20 30')
exit
Rect.create!( map_id: Map.first.id, x: 1, y: 1, name: 'test', display_time: '1.666', draw_points: '10 20 30')
exit
Svg.rect
Svg.rects
Svg.methods
exit
Rect.first
exit
rect = FactoryBot.build(:rect, map_id: nil)
rect.save
rect.errors.full_messages
exit
FactoryBot.create(:rect, x: nil)
exit
FactoryBot.create(:rect, x: nil)
exit
FactoryBot.create(:rect, fill: nil)
rect =  FactoryBot.build(:rect)
rect
rect.fill = nil
rect.save
exit
rect =  FactoryBot.build(:rect)
rect.fill = nil
rect.save
exit
FactoryBot.create(:rect, fill: nil)

rect = FactoryBot.create(:rect)
rect = FactoryBot.build(:rect)
rect.delete(:fill)
rect.class
rect.superclass
attr = FactoryBot.attribute_for(:rect)
attr = FactoryBot.attributes_for(:rect)
rect
rect.delete(fill)

rect.to_hash
rect.to_s
rect.attributes
attr = rect.attributes
attr.delete(:fill)
attr
attr.delete!(:fill)
attr.delete(:fill)
attr.delete('fill')
attr
Rect.craete(attr)
Rect.create(attr)
Rect.create!(attr)
attr['map_id'] = Map.first
attr
attr['map_id'] = Map.first.id
attr
Rect.create!(attr)
attr.delete('type')
Rect.create!(attr)
attr
rect = Rect.build(attr)
rect = Rect.new(attr)
rect
Rect.new
exit
FactoryBot.create(:rect, fill: nil)
FactoryBot.build(:rect, fill: nil)
Rect.new
exit
Rect.create(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5)
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5)
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
exit
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
exit
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
exit
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
attr = { map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test' }
Rect.create!(attr)
attr = { map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test', fill: nil }
Rect.create!(attr)
exit
Rect.create!(map_id: Map.first.id, x: 1.5, y: 1.5, stroke: 'black', width: 1.5, height: 1.5, name: 'test')
exit
rect = FactoryBot.build(:rect)
rect.class
rect.superclass
rect = FactoryBot.build(:user)
rect.class
User.class
User.superclass
rect.methods
rect.slice
rect.slice(:fill)
rect.slice
rect.slice{ :fill }
rect.slice
rect
rect = FactoryBot.build(:rect)
attr = rect.attributes
attr.delete('fill')
Rect.create!(attr)
attr('map') = Map.first
exit
FactoryBot.attrbutes_for(:rect).map_id = Map.first
FactoryBot.attributes_for(:rect).map_id = Map.first
exit
rspec
exit
attr = FactoryBot.attributes_for(:rect)
attr.delete(:display_time, :draw_points)
attr.delete(:display_time)
attr.delete(:draw_points)
attr
Rect.create!(attr)
attr[:map_id] = Map.first.id
attr
Rect.create!(attr)
Path.create!(attr)
attr.delete(:type)
attr
Path.create!(attr)
path = attr.deep_dup
path.delete[:width]
path.delete(:width)
path.delete(:height)
path
attr
path[:draw_points] = '10'
path
Path.create!(path)
exit
Svg.find_all(type: 'Rect')
Svg.rect
exit
Svg.where(type: 'Rect')
Svg.all
exit
Map.first.svgs
Map.first.rects
exit
'rects'.singularize
'rects'.singularize
exit
'rects'.singularize
exit
String.singularize
'rects'.classify
rspec -n
exit
FactoryBot.create!(:rect, map_id: 17)
FactoryBot.create(:rect, map_id: 17)
Svg.all
exit
Plan.all
plans = Plan.all
plans.deep_transform_keys
plans.transform_keys
plans.attributes
plans.to_json
plans.to_json.transform_keys
plans.to_hash
plans.to_

plans.to_a
plans.map {|plan| plan.to_hash  }
plans.map {|plan| plan.to_s  }
plans.map {|plan| plan.to_json  }
plans.map {|plan| plan.to_h  }
plans.map {|plan| plan.attributes  }
plans.map {|plan| plan.attributes.transform_keys  }
plans.map {|plan| plan.attributes.transform_keys(&:camelize)  }
plans.map {|plan| plan.attributes.transform_keys!(&:camelize, :lower)  }
plans.map {|plan| plan.attributes.transform_keys!(&:camelize(:lower))  }
plans.map {|plan| plan.attributes.transform_keys!{ |key| key.camelize(:lower) }  }
exit
maps = Map.all
maps.class
maps.first
maps.first.class
exit
Map.camelize_attr
Map.class
Map.supterclass
Map.superclass
maps
maps = Map.all
maps.class
maps.superclass
map = maps.first
map.class
map.superclass
Map.methods.include?(:camelize_attr)
maps.methods.include?(:camelize_attr)
Map
Map.class
maps.class
Map.camelize_attr
maps
maps.camelize_attr
exit
maps = Map.all
maps.camelise_attr
maps
Map.camelize_attr
maps.camelize_attr
exit
Map.camelize_attr
maps = Map.where(plan_id: 73)
maps
maps.camelize_attr
exit
exit
plan = Plan.first
plan.svgs
Svg.all
Map.find(17)
plan = Plan.find(73)
plan.svgs
svg = plan.svgs
svg.attributes
svg[0].attributes
exit
plan = Plan.find(73)
svg = plan.svgs
svg[0].attributes
exit
plan = Plan.find(73)
svg = plan.svgs
svg[0].attributes
exit
map = Map.first
map
map.camelize_keys
exit
map.camelize_keys
map = Map.first
map.camelize_keys
exit
map = Map.first
map.camelize_keys
exit
map = Map.first
map.camelize_keys
maps = Map.all
maps.camelize_keys
exit
Svg.all
Plan.find(73).svgs
exit
Plan.find(73).svgs
exit
Plan.find(73).svgs
exit
Svg.destroy_all
FactoryBot.create(:rect, map_id: 17)
exit
'Rect'.singularize
'Rect'.lower
'Rect'.downcase
'rects'.classify
'rects'.classify.find(1)
'rects'.classify.constantize.find(1)
'Rect'.pluralize
'Rect'.pluralize(:lower)
'Rect'.downcase.pluralize
exit
Svg.keys
Svg.attributes
Svg.attribute
Svg
Rect
User
exit
Svg
exit
Svg
Svg.all
Rect
Svg
Svg.keys
Svg.column_names
Svg.column_names.map(&:to_sym)
Svg.column_names.map(&:to_sym).inspect
exit
User.count
User.plans(1).count
User.joins(:plans).count()
User.joins(:plans).count
User.joins(:plans).where(plan.id: 36).count
User.joins(:plans).where('plans.id = 36').count
Plan.ids
User.joins(:plans).where('plans.id = 63').count
exit
exit
Svg.create(map_id: Map.first.id, type: 'Rect', x: 100, y: 100, name: 'test', display_order: 1 )
Svg.create!(map_id: Map.first.id, type: 'Rect', x: 100, y: 100, name: 'test', display_order: 1 )
Svg.create!(map_id: Map.first.id, type: 'Rect', x: 100, y: 100, name: 'test', display_order: 1, width: 100, height: 100 )
Svg.create!(map_id: Map.first.id, type: 'Rect', x: 100, y: 100, name: 'test', display_order: 1, width: 100, height: 100 )
Svg.all
Svg.count
Svg.create!(map_id: Map.first.id, type: 'Rect', x: 100, y: 100, name: 'test', display_order: 1, width: 100, height: 100 )
Svg.count
exit
Svg.joins(:map, 63)
Svg.joins(:map)
Map.all
Svg.joins(:map 5)
Svg.joins(:map, 5)
Map.joins(:plan, 73)
exit
Map.joins(:plan)
Map.joins(:plan).where('plan_id = ?', 73)
exit
Svg.map_in_svg_count
Svg.map_in_svg_count(1)
exit
FactoryBot.create_list(:rect, 100000)
Svg.all
Svg.count
FactoryBot.create_list(:rect, 38)
Svg.count
Svg.order(:display_order)
exit
Svg.order(:display_order)
Svg.order(:display_order)
Svg.order(:display_order)
puts Svg.order(:display_order)
exit
FactoryBot.create_list(:rect, 1600)
puts Svg.order(:display_order)
puts Svg.order(:display_order)
puts Svg.order(:display_order)
puts Svg.order(:display_order)
puts Svg.order(:display_order)
puts Svg.order(:display_order)
exit
User.all
exit
Svg.first
Svg.all
exit
Svg.al
Svg.all
Svg.plack(:display_order)
Svg.pluck(:display_order)
Svg.pluck(:display_order)
exit
Svg.first.map.svgs.max
Svg.first.map.svgs.max(:display_order)
Svg.first.map.svgs.max(display_order)
Svg.first.map.svgs.maximum(:display_order)
exit
Svg.all
Svg.pluck(:display_order)
Svg.pluck(:display_order)
Svg.pluck(:display_order)
Svg.pluck(:display_order)
Svg.pluck(:display_order)
Svg.pluck(:display_order)
Svg.pluck(:display_order)
Svg.pluck(:display_order)
Svg.pluck(:display_order)
Svg.pluck(:display_order)
exit
exit
avatar = Rack::Test::UploadedFile.new("#{Rails.root}/spec/fixtures/files/test_img.png", "image/png")
avatar
avatar.attributes
avatar.methods
exit
User.first.avatar
User.first.avatar?
User.first.attached?
User.first.avatar.attached?
User.last
exit
User.first
exit
User.first.avatar
User.first.attributes
exit
User.first
User.first.avatar_url
exit
User.first.avatar
User.first.avatar_url
User.first.avatar.attached?
User.all
exit
User.first.avatar.attached?
User.first.avatar_url
exit
User.first.avatar_url
exit
user = User.first
user.avatar = user.avatar_url
user
user.attributes
user[:avatar] = user.avatar_url
user.avatar
user.avatar_url
exit
user = User.first
user.attributes
user.attributes.avatar = user.avatar_url
user.attributes.avatar = 'a'
user.attributes["avatar"] = user.avatar_url
user
user.attributes
{ a: 1 }
ha = { a: 1 }
ha.a
ha[:a]
ha[:b] = 2
ha
user
user.attributes
user_attr = user.attributes
user_attr
user_attr['avatar'] = user.avatar_url
user_attr
exit
User.all
User.first.avatar.attached?
User.second.avatar.attached?
exit
Rails.application.credentials.dig(:aws, :access_key_id)
Rails.application.credentials.dig(:db, :password)
Rails.application.credentials.dig(:db, :host)
Rails.application.credentials.dig(:db[:host])
Rails.application.credentials.dig(:db)
Rails.application.credentials.db[:password]
exit
Rails.application.credentials.dig(:aws, :secret_access_key)

Rails.application.credentials.dig(:secret_access_key)
exit
Rails.application.credentials.dig(:storage, :secret_access_key)
Rails.application.credentials.dig(:storage, :access_key_id)
exit
user = User.find(4)
user.avatar.attached?
user.avatar.purge
user.avatar.attached?
exit
Svg.first
Svg.first.todo_list?
Svg.first.todo_list
User.first
Plan.first
exit
'todo_list'.pluralize
exit
'comments'.pluralize
exit
'todo_lists'.singularize
exit
hash = {a:1 } 
hash[:b] = [ 1,2 ]
hash
hash[:b].size
exit
Todo.first
exit
FactoryBot.create(:todo)
todo = Todo.first
todo.with_attached_images
Todo.with_attached_images
Todo.with_attached_images.find(1)
todo.images
todo.images.with_attached_images
todo.all
Todo.all
Todo.with_attached_images
exit
        setting = [\
          { io: File.open("#{Rails.root}/spec/fixtures/files/test_img.png")  },\
          { filename: 'test_img.png' },\
          { content_type: 'image/png' }\
        ]
p *setting
p setting
exit
"#{Rails.root}/tmp/storage"
FileUtils.rm_rf("#{Rails.root}/tmp/storage")
exit
Todo.first.class
User.fist.class
User.fitst.class
User.first.class
User.first.is_a
User.first.is_a?
User.first.is_a?(User)
exit
Todo.last.attached?
Todo.last.image_attached?
Todo.last
Todo.last.images.attached?
rspec
exit
Todo.last
Todo.last.images
Todo.last.image_urls
Todo.last.image_urls
Todo.last.image_urls.variant(resize: '50')
User.first
User.first.avatar
User.first.avatar.attached?
User.all
User.last.avatar.attached?
Todo.last.image_urls
Todo.last.image_urls[0]
Todo.last.image_urls[0].variant(resize: '50')
Todo.last.images[0]
Todo.last.images[0].variant(resize_to_fit: '50')
Todo.last.images[0].variant(resize_to_fit: '50').procssed
Todo.last.images[0].variant(resize_to_fit: '50').processed
Todo.last.images[0].variant(resize_to_fit: '50x50')
Todo.last.images[0].variant(resize_to_fit: '50x50').prosecced
Todo.last.images[0].variant(resize_to_fit: '50x50').processed
Todo.last.images[0].variant(resize_to_fit: '50x50')
user = User.first
user.avatar.attached?
User.second.avatar.attached?
exit
user = User.second
user.avatarurl
user.avatar_url
user.variant(resize_to_fit: [50,50]).avatar_url
user.variant(resize_to_fit: [50,50])
user.avatar_url.variant(resize_to_fit: [50,50])
user.avatar.variant(resize_to_fit: [50,50])
resize_avatar = user.avatar.variant(resize_to_fit: [50,50])
resize_avatar
Rails.application.routes.url_helpers.url_for(resize_avatar)
Rails.application.routes.url_helpers.url_for(user.avatar)
User.avatar
user.avatar
resize_avatar
exit
ActiveStorage::Variant
exit
Rails.application.config.active_storage.variant_processor
exit
def tes(*unko)\
  puts unko\
end
tes
tes(1,2,3)
exit
resize_image = Todo.last.images[0].variant(resize_to_fit: [nil, nil])
exit
arr = []
!!arr
!!arr.length
arr.length
exit
arr = []
arr.nil?
arr.blank?
arr.push(1)
arr
arr.blank?
exit
''.present?
'a'.present?
exit
exit
exit
Todo.columns
Todo.column
Todo.column_names
Todo.column_names.camalize
Todo.column_names.map(&:camelize)
Todo.column_names.map(&:camelize, :lower)
Todo.column_names.map{|name| name.camelize(:lower)}
Todo.column_names.count
Todo.column_names.size
exit
Todo.first
todo = Todo.first
todo.begin_time
todo = Todo.second
todo
todo.begin_time
todo.begin_time.strftime('%H:%M')
exit
Svg.all
Svg.all
exit
svg = Svg.first
svg
svg.update(todo_list_id: nil)
svg
exit
te = { a:1, b:2 }
te
te.include?(a)
te.include?(:a)
te.include?(:b)
te.include?(:c)
exit
te = { a:1,b:2}
te[:a]
te[:a] == 1
te[:a] != 1
exit
te = {a:1,b:2}
te[:a]
te[:a].nil?
te[:c].nil?
te.include?(:c)
te.include?(:c) && te[:c].nil?
te[:c] = nil
te
te.include?(:c) && te[:c].nil?
te[:c] = 'black'
te.include?(:c) && te[:c].nil?
exit
a = {a:1}
a[:a]
a[:b]
a[:b] == 1
exit
Plan.find(1).svgs
exit
SvgRedis
exit
SvgRedis
include SvgRedis
exit
Api::SvgRedis
exit
Api::SvgRedis
exit
Plan.maps
Plan.map
Plan.find(1).maps
Map.find(1).svgs
Map.find(1).svgs.to_json
Map.find(1).svgs[0].to_json
Map.find(1).svgs.map(&:to_json)
svgs = Map.find(1).svgs.map(&:to_json)
svgs.length
svgs = Map.find(1).svgs
svgs.length
svgs[0]
svgs[0].to_h
svgs[0].to_a
svgs[0].to_ｈ
svgs[0].to_h
svgs[0].to_s
svgs[0].attr
svgs[0].attributes
svgs = Map.find(1).svgs.map(&:attributes)
svgs
svgs.length
svgs.length.each do |svg|\
  Api::SvgRedis.create(1, svg)\
end
svgs.each do |svg|\
  Api::SvgRedis.create(1, svg)\
end
Svg::Redis.index([1])
Api::SvgRedis.index([1])
Api::SvgRedis.index([1])[0]
svgs[0]
"1".to_i
Api::SvgRedis.index([1])[0]
exit
Api::SvgRedis.index([1])
exit
Benchmark.bm do |r|\
  Svg.first.update(name: 'unko')
Benchmark.bm do |r|\
  Svg.first.update(name: 'unko')
Benchmark.bm do |r|\
  r.report "mysql" do \
    Svg.first.update(name: 'unko')\
  end\
end
Benchmark.bm do |r|\
  r.report "mysql" do \
    Svg.first.update(name: 'unko')\
  end\
end
Benchmark.bm do |r|\
  r.report "mysql" do \
    Svg.first.update(name: 'unko')\
  end\
end
Benchmark.bm do |r|\
  r.report "mysql" do \
    Svg.first.update(name: 'unkoo')\
  end\
end
Benchmark.bm do |r|\
  r.report "mysql" do \
    Svg.first.update(name: 'unkooo')\
  end\
end
Benchmark.bm do |r|\
  r.report "mysql" do \
    Svg.first.update(name: 'unkoooo')\
  end\
end
base_logger = ActiveRecord::Base.logger
ActiveRecord::Base.logger = nil
Benchmark.bm do |r|\
  r.report "mysql" do \
    Svg.first.update(name: 'unkoooo')\
  end\
end
Benchmark.bm do |r|\
  r.report "mysql" do \
    Svg.first.update(name: 'unkooooo')\
  end\
end
Benchmark.bm do |r|\
  r.report "mysql" do \
    Svg.first.update(name: 'unko')\
  end\
end
Api::SvgRedis.index([1])
Api::SvgRedis.index([1]).find{|svg| svg['id'] == 1}
svg = Api::SvgRedis.index([1]).find{|svg| svg['id'] == 1}
svg
svg['name'] = 'unko'
svg
Benchmark.bm do |r|\
  r.report "redis" do \
    Api::SvgRedis.update_all(1, svg)\
  end\
end
Benchmark.bm do |r|\
  r.report "redis" do \
    Api::SvgRedis.update_all(1, svg)\
  end\
end
exit
svg = Api::SvgRedis.index([1]).find{|svg| svg['id'] == 1}
svg['name'] = 'unko'
Benchmark.bm do |r|\
  r.report "redis" do \
    Api::SvgRedis.update_all(1, svg)\
  end\
end
attrs = svgs.flat_map { |svg| [svg['id'], Oj.generate(svg)] }
Benchmark.bm do |r|\
  r.report "redis" do \
    Api::SvgRedis.update_all(1, [svg])\
  end\
end
svg = Api::SvgRedis.index([1]).find{|svg| svg['id'] == 1}
svg
Benchmark.bm do |r|\
  r.report "redis" do \
    Api::SvgRedis.update_all(1, svg)\
  end\
end
Benchmark.bm do |r|\
  r.report "redis" do \
    Api::SvgRedis.update_all(1, [svg])\
  end\
end
Benchmark.bm do |r|\
  r.report "redis" do \
    Api::SvgRedis.update_all(1, [svg])\
  end\
end
svg
svg['name'] = 'unpiiiiiiii'
Benchmark.bm do |r|\
  r.report "redis" do \
    Api::SvgRedis.update_all(1, [svg])\
  end\
end
Api::SvgRedis.index([1])
r = Redis.new
r.keys *\
;

svgs = Api::SvgRedis.index([1])
svgs
exit
svg = Svg.first.attributes
svg
svg[:id] = nil
svg
svg.delete(:id)
svg
svg.delete('id')
svg
Benchmark.bm do |r|\
  r.report "redis" do \
    Svg.create(svg)\
  end\
end
ActiveRecord::Base.logger = nil
Benchmark.bm do |r|\
  r.report "redis" do \
    Svg.create(svg)\
  end\
end
Benchmark.bm do |r|\
  r.report "redis" do \
    10000.times do Svg.create(svg) end\
  end\
end
Benchmark.bm do |r|\
  r.report "redis" do \
    10000.times do Api::SvgRedis.create(1, svg) end\
  end\
end
Benchmark.bm do |r|\
  r.report "redis" do \
    10000.times do Api::SvgRedis.create(1, [svg]) end\
  end\
end
Benchmark.bm do |r|\
  r.report "redis" do \
    10000.times do Api::SvgRedis.create(1, svg) end\
  end\
end
exit
ActiveRecord::Base.logger = nil
Benchmark.bm do |r|\
  r.report "redis" do \
    10000.times do Api::SvgRedis.create(1, svg) end\
  end\
end
svg = Svg.first.attributes
svg.delete('id')
svg
Benchmark.bm do |r|\
  r.report "redis" do \
    10000.times do Api::SvgRedis.create(1, svg) end\
  end\
end
Benchmark.bm do |r|\
  r.report "mysql" do \
    10000.times do Svg.create(svg) end\
  end\
end
Benchmark.bm do |r|\
  r.report "mysql" do \
    Svg.all\
  end\
end
Svg.count
Benchmark.bm do |r|\
  r.report "mysql" do \
    Svg.where(map_id: 1)\
  end\
end
Svg.where(map_id: 1).count
Svg.where(map_id: ).count
Svg.where(map_id: 2).count
Benchmark.bm do |r|\
  r.report "mysql" do \
    Svg.where(map_id: 2)\
  end\
end
Benchmark.bm do |r|\
  r.report "mysql" do \
    Svg.where(map_id: 2)\
  end\
end
Benchmark.bm do |r|\
  r.report "redis" do \
    Api::SvgRedis.index([2])\
  end\
end
Benchmark.bm do |r|\
  r.report "redis" do \
    Api::SvgRedis.index([2])\
  end\
end
Svg.find(1000).update(name: 'unkooo')
Svg.find(10000).update(name: 'unkooo')
Svg.first
Svg.find(1000)
Svg.find(100)
Svg.find(10)
Svg.find(10000)
Svg.all.count
Svg.last
Svg.find(20000)
Svg.find(15000)
Benchmark.rm do |r|\
  r.report 'mysql' do\
    Svg.find(15000).update(name: 'unkoooooooooo')\
  end\
end
Benchmark.mk do |r|\
  r.report 'mysql' do\
    Svg.find(15000).update(name: 'unkoooooooooo')\
  end\
end
Benchmark.mr do |r|\
  r.report 'mysql' do\
    Svg.find(15000).update(name: 'unkoooooooooo')\
  end\
end
Benchmark.bm do |r|\
  r.report 'mysql' do\
    Svg.find(15000).update(name: 'unkoooooooooo')\
  end\
end
Benchmark.bm do |r|\
  r.report 'redis' do\
   Api::SvgRedis.index(1) \
  end\
end
Benchmark.bm do |r|\
  r.report 'redis' do\
   Api::SvgRedis.index(2) \
  end\
end
Benchmark.bm do |r|\
  r.report 'redis' do\
   Api::SvgRedis.index([1]) \
  end\
end
Benchmark.bm do |r|\
  r.report 'redis' do\
   Api::SvgRedis.index([1]) \
  end\
end
Benchmark.bm do |r|\
  r.report 'redis' do\
   Api::SvgRedis.index([2]) \
  end\
end
Benchmark.bm do |r|\
  r.report 'redis' do\
   Api::SvgRedis.index([1]) \
  end\
end
Benchmark.bm do |r|\
  r.report 'redis' do\
   Api::SvgRedis.update_all(1, [svg]) \
  end\
end
Svg.all
Svg.all; 0
Svg.all.count
svg
svg['id'] = 10000
svg
Benchmark.bm do |r|\
  r.report 'redis' do\
   Api::SvgRedis.update_all(1, [svg]) \
  end\
end
svg['name'] = 'updated'
Benchmark.bm do |r|\
  r.report 'redis' do\
   Api::SvgRedis.update_all(1, [svg]) \
  end\
end
Api::SvgRedis.index[1].find { |svg| svg.id == 10000  }
Api::SvgRedis.index([1]).find { |svg| svg.id == 10000  }
Api::SvgRedis.index([1]).find { |svg| svg['id'] == 10000  }
exit
Svg.first
Svg.second
svg = Svg.second.attributes
svg.delete('id')
svg
Benchmark.bm do |r|\
  r.report "mysql" do\
    10000.times { Svg.create(svg) }\
  end\
end
Benchmark.bm do |r|\
  r.report "redis" do\
    10000.times { Api::SvgRedis.create(1, svg) }\
  end\
end
Api::SvgRedis.index([1])
Benchmark.bm do |r|\
  r.report "redis" do\
   Api::SvgRedis.index([1]) \
  end\
end
Benchmark.bm do |r|\
  r.report "redis" do\
   Svg.all \
  end\
end
Svg.all.count
exit
Api::SvgRedis.count
Api::SvgRedis.index([1]).count
redis = Redis.new(host: 'redis')
redis.keys
redis = Redis.new(host: 'redis', db:1)
redis.keys
redis.flushdb
Map.first
Plan.first
ActiveRecord.Base.execute('select * from plans where id = 1')

Benchmark.bm do |r|\
  r.report "redis" do\
    10000.times { Api::SvgRedis.create(1, svg) }\
  end\
end
svg = Svg.first.attributes
svg.delete(:id)
svg.delete('id')
Benchmark.bm do |r|\
  r.report "redis" do\
    10000.times { Api::SvgRedis.create(1, svg) }\
  end\
end
exit
@todo_lists = Plan.find(1).todo_lists.includes(:todos)
Svg.delete_all
exit
redis = Redis.new(host: 'redis')
redis.flushdb
redis = Redis.new(host: 'redis', db: 1)
redis.flushdb
exit
Svg.first
Map.first
ActiveRecord::Base.connection.execute("update maps set name = 'updated' where id = 1")
Map.first
Map.first.update(name: 'unko')
ActiveRecord::Base.connection.execute("update maps set name = ? where id = 1", 'kokoa')
exit
Plan.exist(1)
Plan.exists?(1)
Plan.exists?(3)
Plan.exists?(7)
Plan.exists?(nil)
exit
